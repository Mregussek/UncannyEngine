#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "DataTypes.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba32f) uniform image2D img;
layout(binding = 2, set = 0) uniform CameraProperties
{
    mat4 projInverse;
    mat4 viewInverse;
} cam;

layout(location = 0) rayPayloadEXT HitPayload hitPayload;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = inUV * 2.f - 1.f;

    const vec4 origin = cam.viewInverse * vec4(0.f, 0.f, 0.f, 1.f);
    const vec4 target = cam.projInverse * vec4(d.xy, 1.f, 1.f) ;
    const vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0.f) ;

    hitPayload.rayOrigin = origin.xyz;
    hitPayload.rayDirection = direction.xyz;

    vec3 rayColorValue = vec3(0);
    int maxDepth = 2;
    for (int i = 0; i < maxDepth; i++)
    {
        hitPayload.IsReflective = false;
        traceRayEXT(topLevelAS,             // accelerationStructureEXT topLevel
                    gl_RayFlagsOpaqueEXT,   // rayFlags
                    0xff,                   // cullMask
                    0,                      // sbtRecordOffset
                    0,                      // sbtRecordStride
                    0,                      // missIndex
                    hitPayload.rayOrigin,   // origin
                    0.001f,                 // Tmin
                    hitPayload.rayDirection,// direction
                    10000.0f,               // Tmax
                    0                       // payload
        );
        rayColorValue += hitPayload.directColor;
        if (!hitPayload.IsReflective)
        {
            break;
        }
    }

    imageStore(img, ivec2(gl_LaunchIDEXT.xy), vec4(rayColorValue, 1.0));
}
