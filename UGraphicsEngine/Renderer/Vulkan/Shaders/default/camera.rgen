#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../DataTypes.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba32f) uniform image2D outputImage;
layout(binding = 2, set = 0) uniform PerFrameUniformData_ { PerFrameUniformData d; } perFrameData;

layout(location = 0) rayPayloadEXT vec4 payload;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = inUV * 2.f - 1.f;

    const vec4 origin = perFrameData.d.viewInverse * vec4(0.f, 0.f, 0.f, 1.f);
    const vec4 target = perFrameData.d.projInverse * vec4(d.xy, 1.f, 1.f) ;
    const vec4 direction = perFrameData.d.viewInverse * vec4(normalize(target.xyz), 0.f) ;

    traceRayEXT(topLevelAS,             // accelerationStructureEXT topLevel
                gl_RayFlagsOpaqueEXT,   // rayFlags
                0xff,                   // cullMask
                0,                      // sbtRecordOffset
                0,                      // sbtRecordStride
                0,                      // missIndex
                origin.xyz,             // origin
                0.001f,                 // Tmin
                direction.xyz,          // direction
                10000.0f,               // Tmax
                0                       // payload
    );

    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(payload.rgb, 1.0));
}
